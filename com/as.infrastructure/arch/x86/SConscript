import os
from building import *

Import('asenv')
MODULES=asenv['MODULES']
ASROOT=asenv['ASROOT']

cwd = GetCurrentDir()

objs = []

objs += Glob('bsp/i8259.c')
objs += Glob('bsp/protect.c')
objs += Glob('bsp/serial.c')

if('run' in COMMAND_LINE_TARGETS):
    build = '%s/release/%s'%(ASROOT,asenv['RELEASE'])
    params = ''
    if('gdb' in COMMAND_LINE_TARGETS):
        params += ' -gdb tcp::1234 -S'
    RunCommand('cd %s && qemu-system-i386 -fda ./TINIX.IMG -boot a -m 64M -serial stdio %s'%(build,params))

if(asenv.GetOption('clean')):
    RunCommand('cd %s/bsp && rm -fv *.asm.obj'%(cwd))
    RunCommand('cd %s/boot && rm -fv *.bin'%(cwd))
else:
    for src in Glob('bsp/*.asm'):
        asm = os.path.basename(str(src))
        RunCommand('cd %s/bsp && nasm -f elf -g -o %s.obj %s'%(cwd,asm,asm))
    for src in Glob('boot/*.asm'):
        asm = os.path.basename(str(src))
        RunCommand('cd %s/boot && nasm -o %s.bin %s'%(cwd,asm[:-4],asm))

    if(asenv['POSTACTION'] != ''):
        asenv['POSTACTION'] += ' && '
    asenv['POSTACTION'] += 'dd if=/dev/zero of=TINIX.IMG bs=512 count=2880'
    asenv['POSTACTION'] += ' && sudo mkfs.vfat TINIX.IMG'
    asenv['POSTACTION'] += ' && dd conv=notrunc if=%s of=TINIX.IMG bs=512 count=1'%(str(Glob('boot/boot.bin')[0]))
    asenv['POSTACTION'] += ' && mkdir -p tmp'
    asenv['POSTACTION'] += ' && sudo mount -t vfat TINIX.IMG tmp'
    asenv['POSTACTION'] += ' && sudo cp %s tmp'%(str(Glob('boot/loader.bin')[0]))
    asenv['POSTACTION'] += ' && sudo cp x86 tmp/kernel.bin'
    asenv['POSTACTION'] += ' && sudo sync'
    asenv['POSTACTION'] += ' && sudo umount tmp'

objs += Glob('bsp/*.asm.obj')

if('PCI' in MODULES):
    objs += Glob('bsp/pci-x86.c')

if('CAN' in MODULES):
    objs += Glob('mcal/Can.c')
    asenv.Append(CPPDEFINES=['USE_CAN','CAN_LL_DL=64'])

if('MCU' in MODULES):
    objs += Glob('mcal/Mcu.c')
    asenv.Append(CPPDEFINES='USE_MCU')

if('EEP' in MODULES):
    objs += Glob('../posix/mcal/Eep.c')
    asenv.Append(CPPDEFINES='USE_EEP')

if('FLS' in MODULES):
    objs += Glob('../posix/mcal/Fls.c')
    asenv.Append(CPPDEFINES='USE_FLS')

asenv.Append(CCFLAGS=['-std=gnu99','-O0','-g'])
asenv.Append(ASFLAGS=['-g'])
asenv.Append(ASFLAGS=['-I%s/bsp'%(cwd)])

asenv.Append(CPPPATH=['%s/bsp'%(cwd),'%s/mcal'%(cwd)])
asenv['CC'] ='gcc -m32 -fno-stack-protector'
asenv['AS'] ='gcc -m32'
asenv['LINK'] ='ld -m32 -melf_i386'

if(os.name != 'nt'):
    asenv.Append(CPPPATH=['/usr/include/newlib'])

Return('objs')
