import os
from building import *

Import('asenv')
MODULES=asenv['MODULES']
ASROOT=asenv['ASROOT']

cwd = GetCurrentDir()

objs = []

objs += Glob('bsp/i8259.c')
objs += Glob('bsp/protect.c')
objs += Glob('bsp/serial.c')
objs += Glob('bsp/mmu.c')

if(asenv.GetOption('clean')):
    RunCommand('cd %s/bsp && rm -fv *.asm.obj'%(cwd))
    RunCommand('cd %s/boot && rm -fv *.bin'%(cwd))
else:
    for src in Glob('bsp/*.asm'):
        asm = os.path.basename(str(src))
        MKObject(str(src), str(src)+'.obj', 
                 'cd %s/bsp && nasm -f elf -g -o %s.obj %s'%(cwd,asm,asm))
    for src in Glob('boot/*.asm'):
        asm = os.path.basename(str(src))
        MKObject(str(src), str(src)[:-4]+'.bin', 
                 'cd %s/boot && nasm -o %s.bin %s'%(cwd,asm[:-4],asm))

    if(asenv['POSTACTION'] != ''):
        asenv['POSTACTION'] += ' && '
    asenv['POSTACTION'] += 'dd if=/dev/zero of=TINIX.IMG bs=512 count=2880'
    asenv['POSTACTION'] += ' && sudo mkfs.vfat TINIX.IMG'
    asenv['POSTACTION'] += ' && dd conv=notrunc if=%s of=TINIX.IMG bs=512 count=1'%(str(Glob('boot/boot.bin')[0]))
    asenv['POSTACTION'] += ' && mkdir -p tmp'
    asenv['POSTACTION'] += ' && sudo mount -t vfat TINIX.IMG tmp'
    asenv['POSTACTION'] += ' && sudo cp %s tmp'%(str(Glob('boot/loader.bin')[0]))
    asenv['POSTACTION'] += ' && sudo objcopy -S x86 tmp/kernel.bin'
    asenv['POSTACTION'] += ' && sudo sync'
    asenv['POSTACTION'] += ' && sudo umount tmp'

objs += Glob('bsp/*.asm.obj')

asenv.Append(CPPDEFINES=['__X86__'])

if('PCI' in MODULES):
    objs += Glob('bsp/pci-x86.c')

if('CAN' in MODULES):
    objs += Glob('mcal/Can.c')
    asenv.Append(CPPDEFINES=['USE_CAN','CAN_LL_DL=64'])

if('MCU' in MODULES):
    objs += Glob('mcal/Mcu.c')
    asenv.Append(CPPDEFINES='USE_MCU')

if('EEP' in MODULES):
    objs += Glob('../posix/mcal/Eep.c')
    asenv.Append(CPPDEFINES='USE_EEP')

if('FLS' in MODULES):
    objs += Glob('../posix/mcal/Fls.c')
    asenv.Append(CPPDEFINES='USE_FLS')

if(('LWIP' in MODULES) and ('RTTHREAD' not in MODULES)):
    asenv.Append(CPPPATH=['%s/../common/lwip'%(cwd)])
    if(os.getenv('PTHREAD') == 'yes'):
        download = '%s/release/download'%(ASROOT)
        lwip='%s/lwip-contrib'%(download)

        if(not os.path.exists(lwip)):
            MKDir(download)
            RunCommand('''cd %s && git clone git://git.savannah.nongnu.org/lwip/lwip-contrib.git && 
                cd lwip-contrib && git checkout STABLE-1_4_1'''%(download))
            RunCommand('sed -i "22c #include <ddk/ntddndis.h>" %s/lwip-contrib/ports/win32/pcapif_helper.c'%(download))

        MKSymlink(lwip,'%s/lwip-contrib'%(cwd))
        MKDir('%s/lwip'%(cwd))
        asenv.Append(CPPPATH=['%s/lwip'%(cwd)])
        objs += Glob('lwip-contrib/ports/unix/sys_arch.c')
        MKSymlink('%s/lwip-contrib/ports/unix/include/arch/sys_arch.h'%(cwd),
                  '%s/lwip/lwip_sys_arch.h'%(cwd))
        objs += Glob('lwip-contrib/apps/httpserver/*.c')
        objs += Glob('../common/lwip/*.c')
        asenv.Append(CPPDEFINES='LWIP_POSIX_ARCH')
    else:
        objs += Glob('../common/lwip/*.c')
    asenv.Append(CPPDEFINES='LWIP_TIMEVAL_PRIVATE=0')
    if(os.name == 'nt'):
        asenv.Append(CPPDEFINES='USE_PCAPIF')

if(('LWIP' in MODULES) and ('RTTHREAD' in MODULES)):
    objs += Glob('../common/lwip/netbios.c')
    if(os.name == 'nt'):
        asenv.Append(CPPDEFINES='USE_PCAPIF')

asenv.Append(CCFLAGS=['-std=gnu99','-O0','-g'])
asenv.Append(ASFLAGS=['-g'])
asenv.Append(ASFLAGS=['-I%s/bsp'%(cwd)])

asenv.Append(CPPPATH=['%s/bsp'%(cwd),'%s/mcal'%(cwd)])
CC = asenv['CC']
LD = CC
asenv['CC'] =CC+' -m32 -fno-stack-protector'
asenv['AS'] =CC+' -m32'
asenv['LINK'] =LD+' -m32 -melf_i386'

Return('objs')
