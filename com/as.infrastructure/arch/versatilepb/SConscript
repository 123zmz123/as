import os
from building import *

Import('asenv')
MODULES=asenv['MODULES']
ASROOT=asenv['ASROOT']

cwd = GetCurrentDir()

objs = []

if('RTTHREAD' not in MODULES):
    objs += Glob('bsp/*.c')
else:
    objs += Glob('rtbsp/*.c')
    objs += Glob('bsp/pci.c')
    asenv.Append(CPPPATH=['%s/rtbsp'%(cwd)])
    asenv.Append(ASFLAGS=['-I%s/rtbsp'%(cwd)])

if('CAN' in MODULES):
    objs += Glob('mcal/Can.c')
    asenv.Append(CPPDEFINES=['USE_CAN','CAN_LL_DL=64'])

if('LCD' in MODULES):
    objs += Glob('mcal/Lcd.c')
    asenv.Append(CPPDEFINES='USE_LCD')

if('MCU' in MODULES):
    objs += Glob('mcal/Mcu.c')
    asenv.Append(CPPDEFINES='USE_MCU')

if('EEP' in MODULES):
    objs += Glob('../posix/mcal/Eep.c')
    asenv.Append(CPPDEFINES='USE_EEP')

if('FLS' in MODULES):
    objs += Glob('../posix/mcal/Fls.c')
    asenv.Append(CPPDEFINES='USE_FLS')

if(('LWIP' in MODULES) and ('RTTHREAD' not in MODULES)):
    asenv.Append(CPPPATH=['%s/../common/lwip'%(cwd)])
    if(os.getenv('PTHREAD') == 'yes'):
        download = '%s/release/download'%(ASROOT)
        lwip='%s/lwip-contrib'%(download)

        if(not os.path.exists(lwip)):
            MKDir(download)
            RunCommand('''cd %s && git clone git://git.savannah.nongnu.org/lwip/lwip-contrib.git && 
                cd lwip-contrib && git checkout STABLE-1_4_1'''%(download))
            RunCommand('sed -i "22c #include <ddk/ntddndis.h>" %s/lwip-contrib/ports/win32/pcapif_helper.c'%(download))

        MKSymlink(lwip,'%s/lwip-contrib'%(cwd))
        MKDir('%s/lwip'%(cwd))
        asenv.Append(CPPPATH=['%s/lwip'%(cwd)])
        objs += Glob('lwip-contrib/ports/unix/sys_arch.c')
        MKSymlink('%s/lwip-contrib/ports/unix/include/arch/sys_arch.h'%(cwd),
                  '%s/lwip/lwip_sys_arch.h'%(cwd))
        objs += Glob('lwip-contrib/apps/httpserver/*.c')
        objs += Glob('../common/lwip/*.c')
        asenv.Append(CPPDEFINES='LWIP_POSIX_ARCH')
    else:
        objs += Glob('../common/lwip/*.c')
    asenv.Append(CPPDEFINES='LWIP_TIMEVAL_PRIVATE=0')
    if(os.name == 'nt'):
        asenv.Append(CPPDEFINES='USE_PCAPIF')

if(('LWIP' in MODULES) and ('RTTHREAD' in MODULES)):
    objs += Glob('../common/lwip/netbios.c')
    if(os.name == 'nt'):
        asenv.Append(CPPDEFINES='USE_PCAPIF')
asenv.Append(CCFLAGS=['-std=gnu99','-O0','-g'])
asenv.Append(ASFLAGS=['-g'])

asenv.Append(CCFLAGS=['-mcpu=arm926ej-s','-marm'])
asenv.Append(ASFLAGS=['-mcpu=arm926ej-s','-marm'])
asenv.Append(CPPPATH=['%s/bsp'%(cwd),'%s/mcal'%(cwd)])
asenv['CC']='arm-none-eabi-gcc'
asenv['AS']='arm-none-eabi-as'
asenv['LINK']='arm-none-eabi-ld'

asenv['S19'] = 'arm-none-eabi-objcopy -O srec --srec-forceS3 --srec-len 32'

asenv.Append(CCFLAGS=['-ffunction-sections','-fdata-sections'])
asenv.Append(LINKFLAGS='--gc-sections')

asenv.Append(LIBS=['c','gcc'])

if(os.name == 'nt'):
    gccarm = 'gcc-arm-none-eabi-5_4-2016q3-20160926-win32'
    gccsrc= 'https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/%s.zip'%(gccarm)
    cpl = '%s/release/download/%s'%(ASROOT,gccarm)
    if(not os.path.exists(cpl)):
        RunCommand('cd %s/release/download && wget %s && mkdir -p %s && cd %s && unzip ../%s.zip'%(ASROOT,gccsrc,gccarm,gccarm,gccarm))
    asenv.Append(LIBPATH=['%s/lib/gcc/arm-none-eabi/5.4.1'%(cpl)])
    asenv.Append(LIBPATH=['%s/arm-none-eabi/lib'%(cpl)])
    asenv['CC']='%s/bin/arm-none-eabi-gcc'%(cpl)
    asenv['AS']='%s/bin/arm-none-eabi-gcc -c'%(cpl)
    asenv['LINK']='%s/bin/arm-none-eabi-ld'%(cpl)
    asenv['S19'] = '%s/bin/%s'%(cpl,asenv['S19'])
else:
    # FIXME to the right path
    libgcc = '/usr/lib/gcc/arm-none-eabi/4.8.2'
    assert(os.path.exists(libgcc))
    asenv.Append(LIBPATH=[libgcc,'/usr/lib/arm-none-eabi/newlib'])

if(asenv['RELEASE']=='asboot'):
    asenv['flsdrv']['objs'] += Glob('../common/mcal/RamFlash.c')
    
Return('objs')
