import os
from building import *

cwd = GetCurrentDir()

Import('asenv')
ASROOT = asenv['ASROOT']

print('qemu run command:scons versatilepb run\nqemu debug command: scons versatilepb run gdb')
if('run' in COMMAND_LINE_TARGETS):
    if(os.name == 'nt'):
        qemu = 'C:/msys64/mingw64/bin/qemu-system-arm.exe'
        if(not os.path.exists(qemu)):
            qemu = '%s/release/download/asqemu/qemu-system-arm.exe'%(ASROOT)
            if(not os.path.exists(qemu)):
                RunCommand('cd %s/release/download && '
                           'wget https://github.com/parai/asenv/raw/master/x64/asqemu.zip && '
                           'unzip asqemu.zip'%(ASROOT))
    else:
        qemu = '%s/release/download/qemu/arm-softmmu/qemu-system-arm'%(ASROOT)
    target = '%s/release/%s/versatilepb'%(ASROOT,asenv['RELEASE'])
    if(os.name == 'nt'): target = target + '.exe'
    if((not os.path.exists(qemu)) and (os.name != 'nt')):
        RunCommand('cd %s/release/ascore/ && make asqemu'%(ASROOT))

    build = '%s/release/%s'%(ASROOT,asenv['RELEASE'])

    if(not os.path.exists('%s/asblk0.img'%(build))):
        if(os.name == 'nt'):
            RunCommand('echo "0" > %s/asblk0.img && truncate -s 33554432 %s/asblk0.img'%(build,build))
        else:
            RunCommand('dd if=/dev/zero of=%s/asblk0.img bs=1M count=32'%(build))
            RunCommand('sudo mkfs.fat %s/asblk0.img'%(build))
    if(not os.path.exists('%s/asblk1.img'%(build))):
        if(os.name == 'nt'):
            lwext4mkfs = '%s/release/download/lwext4/build_generic/fs_test/lwext4-mkfs.exe'%(ASROOT)
            RunCommand('echo "0" > %s/asblk1.img && truncate -s 33554432 %s/asblk1.img'%(build,build))
            RunCommand('%s -i %s/asblk1.img -b 4096 -e 4'%(lwext4mkfs,build))
        else:
            RunCommand('dd if=/dev/zero of=%s/asblk1.img bs=1M count=32'%(build))
            RunCommand('sudo mkfs.ext4 -b 4096 %s/asblk1.img'%(build))

    params = '-serial tcp:127.0.0.1:1103,server'
    params += ' -device pci-ascan -device pci-asnet -device pci-asblk'
    if('gdb' in COMMAND_LINE_TARGETS):
        params += ' -gdb tcp::1234 -S'
    if(os.name == 'nt'):
        if('asone' in COMMAND_LINE_TARGETS):
            RunCommand('cd %s/com/as.tool/as.one.py && start %s main.py'%(ASROOT,asenv['python3']))
        RunCommand('start %s/com/as.tool/lua/script/socketwin_can_driver.exe 0'%(ASROOT))
        RunCommand('start %s/com/as.tool/lua/script/socketwin_can_driver.exe 1'%(ASROOT))
        RunCommand('cd %s && start cmd /C %s -m 128 -M versatilepb -kernel %s %s'%(build,qemu,target,params))
        RunCommand('sleep 2 && telnet 127.0.0.1 1103')
    else:
        fp = open('%s/telnet.sh'%(build),'w')
        fp.write('sleep 0.5\ntelnet 127.0.0.1 1103\n')
        fp.close()
        fp = open('%s/qemu.sh'%(build),'w')
        fp.write('%s -m 128 -M versatilepb -kernel %s %s & sh %s/telnet.sh\nsleep 60\n'%(qemu,target,params,build))
        fp.close()
        RunCommand('sudo pgrep qemu-system-arm | xargs -i kill -9 {}')
        RunCommand('cd %s && chmod +x %s/*.sh && sudo gnome-terminal -x %s/qemu.sh'%(build,build,build))
    exit(0)

objs = []

if(asenv['RELEASE']=='asboot'):
    asenv.Append(CPPDEFINES='configTOTAL_HEAP_SIZE=0x7000')
else:
    asenv.Append(CPPDEFINES='configTOTAL_HEAP_SIZE=0x800000')
asenv.Append(CPPDEFINES='MEMORY_SIZE=0x8000000')
asenv.Append(CPPDEFINES='SYSTEM_REGION_START=0x10000000')
asenv.Append(CPPDEFINES='SYSTEM_REGION_END=0x101f4000')
asenv.Append(CPPDEFINES='PAGE_SIZE=0x1000')
asenv.Append(CPPDEFINES='OS_TICKS_PER_SECOND=100')
asenv.Append(CPPDEFINES='USECONDS_PER_TICK=10000')

if(asenv['RELEASE']=='asboot'):
    lds = '%s/../board.bcm2835/script/linker-boot.lds'%(cwd)
else:
    lds = '%s/../board.bcm2835/script/linker-app.lds'%(cwd)
if((asenv['MODULES'] != None) and ('RTTHREAD' in asenv['MODULES'])):
    lds = '%s/versatilepb.lds'%(cwd)
asenv.Append(LINKFLAGS='-static -T %s'%(lds))
asenv.Append(LINKFLAGS='-Map build/versatilepb/versatilepb.map')

MODULES = ['ECUM','SCHM','MCU',
           'DET',
           'CAN','CANIF','PDUR','COM','COMM','CANTP','CANNM',
           'DCM','CANNM','CANSM','NM','OSEKNM','XCP',
           'SOAD','DOIP','LWIP','PCI',
           ]

if(cwd.find('travis') != -1):
    # this is on travis, GUI is not possible as rely on QT to generate pictures to C source code
    pass
elif(os.getenv('SGAPP') != None):
    MODULES += ['LCD','GUI','SG']

print('WARNING: force using SGAPP watch for versatilepb!')
asenv['SGAPP']='watch'

if((asenv['MODULES'] != None) and ('RTTHREAD' in asenv['MODULES'])):
    asenv.Append(CPPDEFINES='RT_HEAP_SIZE=0x800000')
    MODULES += ['LWEXT4']
    MODULES += ['FTP']
    MODULES += ['CLIB_STDIO_PRINTF']
    MODULES += ['CLIB_STDIO_CAN']
else:
    MODULES += ['FATFS','LWEXT4','VFS',
       'CLIB_ASHEAP','CLIB_MISCLIB',
       'CLIB_MBOX','CLIB_QSORT',
       'CLIB_STDIO_PRINTF','CLIB_STDIO_CAN',
       'FTP','SHELL',
       'EEP','FLS','EA','FEE','MEMIF','NVM',
       'DEM',
       'ASKAR'
       ]


ARCH='versatilepb'
arch='arm'

# post special process for asboot release
if(asenv['RELEASE']=='asboot'):
    asenv.Append(CPPDEFINES='FL_ERASE_PER_CYCLE=2048')
    MODULES = ['ECUM','SCHM','MCU','DET',
               'CAN','CANIF','PDUR','CANTP',
               'DCM',
               'FLASH',
               'PCI',
               'CLIB_ASHEAP','CLIB_MISCLIB',
               'CLIB_STDIO_PRINTF',
               'SMALLOS',
               ]
    lds = '%s/com/as.application/board.bcm2835/script/linker-flsdrv.lds'%(ASROOT)
    asenv['flsdrv'] = {'CPPDEFINES':['FLASH_DRIVER_DYNAMIC_DOWNLOAD',
                                  'FLS_START_ADDRESS=0x00040000',
                                  'FLS_END_ADDRESS=0x08000000',
                                  'FLASH_WRITE_SIZE=2'],
                       'CCFLAGS':[],
                       'CPPPATH':['%s/com/as.infrastructure/include'%(ASROOT)],
                       'LINKFLAGS':['-static','-T%s'%(lds)],
                       'objs':[]}

if(asenv['MODULES'] is None):
    asenv['MODULES'] = MODULES
else:
    MODULES = asenv['MODULES']

asenv['ARCH'] = ARCH
asenv['arch'] = arch

asenv.Append(CPPPATH=['%s/../board.posix/common'%(cwd)])

if('MCU' in MODULES):
    objs += Glob('%s/../board.posix/common/Mcu*.c'%(cwd))

if('EEP' in MODULES):
    objs += Glob('%s/../board.posix/common/Eep*.c'%(cwd))

if('FLS' in MODULES):
    objs += Glob('%s/../board.posix/common/Fls*.c'%(cwd))

Return('objs')
